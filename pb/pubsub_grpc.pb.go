// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PubSubBrokerClient is the client API for PubSubBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubSubBrokerClient interface {
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*Empty, error)
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (PubSubBroker_SubscribeClient, error)
}

type pubSubBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewPubSubBrokerClient(cc grpc.ClientConnInterface) PubSubBrokerClient {
	return &pubSubBrokerClient{cc}
}

func (c *pubSubBrokerClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pubsub.PubSubBroker/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubBrokerClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (PubSubBroker_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PubSubBroker_ServiceDesc.Streams[0], "/pubsub.PubSubBroker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubBrokerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSubBroker_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pubSubBrokerSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubBrokerSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubBrokerServer is the server API for PubSubBroker service.
// All implementations must embed UnimplementedPubSubBrokerServer
// for forward compatibility
type PubSubBrokerServer interface {
	Publish(context.Context, *PublishReq) (*Empty, error)
	Subscribe(*SubscribeReq, PubSubBroker_SubscribeServer) error
	mustEmbedUnimplementedPubSubBrokerServer()
}

// UnimplementedPubSubBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedPubSubBrokerServer struct {
}

func (UnimplementedPubSubBrokerServer) Publish(context.Context, *PublishReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPubSubBrokerServer) Subscribe(*SubscribeReq, PubSubBroker_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPubSubBrokerServer) mustEmbedUnimplementedPubSubBrokerServer() {}

// UnsafePubSubBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubSubBrokerServer will
// result in compilation errors.
type UnsafePubSubBrokerServer interface {
	mustEmbedUnimplementedPubSubBrokerServer()
}

func RegisterPubSubBrokerServer(s grpc.ServiceRegistrar, srv PubSubBrokerServer) {
	s.RegisterService(&PubSubBroker_ServiceDesc, srv)
}

func _PubSubBroker_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubBrokerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.PubSubBroker/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubBrokerServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubBroker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubBrokerServer).Subscribe(m, &pubSubBrokerSubscribeServer{stream})
}

type PubSubBroker_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pubSubBrokerSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubBrokerSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// PubSubBroker_ServiceDesc is the grpc.ServiceDesc for PubSubBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubSubBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.PubSubBroker",
	HandlerType: (*PubSubBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSubBroker_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSubBroker_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}
